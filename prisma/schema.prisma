generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int       @id @default(autoincrement())
    name          String    @db.VarChar(255)
    email         String    @unique
    password      String    @db.VarChar(255)
    role          Role
    emailVerified Boolean   @default(false) @map(name: "verified_email")
    verifyToken   String?   @map(name: "verify_token")
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")

    complaints    Complaint[]
    replies      Reply[]

    @@map(name: "users")
}

model Complaint {
    id           Int      @id @default(autoincrement())
    title        String   @db.VarChar(127)
    description  String   @db.Text
    street       String   @db.VarChar(255)
    neighborhood String   @db.VarChar(255)
    zipCode      String   @map(name: "zip_code") @db.Char(10)
    addressReference String? @map(name: "address_reference") @db.VarChar(255)
    status       Status    @default(Aberto)
    images       String[]  @db.VarChar(255)
    userId       Int       @map(name: "user_id")
    createdAt    DateTime  @default(now()) @map(name: "created_at")
    updatedAt    DateTime  @updatedAt @map(name: "updated_at")

    user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    replies         Reply[]

    @@map(name: "complaints")
}

model Reply {
    id               Int       @id @default(autoincrement())
    description      String    @db.Text
    images           String[]  @db.VarChar(255)
    userId           Int       @map(name: "user_id")
    complaintId      Int       @map(name: "complaint_id")
    complaintStatus  Status    @map(name: "complaint_status")
    createdAt        DateTime  @default(now()) @map(name: "created_at")
    updatedAt        DateTime  @updatedAt @map(name: "updated_at")

    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    complaint Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@map(name: "replies")
}

enum Role {
    user
    admin
    manager
}

enum Status {
    Aberto
    Analise
    Andamento
    Finalizado
    Arquivado
}
